{ config, lib, pkgs, ... }:

with lib;

let
  cfg = config.services.walker;
  mkSimpleNativeValueToToml = value:
    if isBool value then boolToString value
    else if isInt value then toString value
    else if isFloat value then toString value
    else if isString value then ''"${value}"''
    else if isList value then 
      if length value == 0 then "[]"
      else "["
        + concatMapStringsSep ", " (v: 
            if isString v then ''"${v}"''
            else if isBool v then boolToString v
            else toString v
          ) value 
        + "]"
    else "Not YET"
    # else throw "Unsupported type for ${value}";
  ;


  mkSimpleExpressionToToml = key: value: "${key} = ${mkSimpleNativeValueToToml value}";

  mkHeaderName = prefix: header: 
    if prefix == null && header == null then null
    else if prefix == null then header
    else if header == null then prefix
    else "${prefix}.${header}"
  ;

  mkSectionHeaderToToml = depth: headerCombined:
    let
      # Add brackets based on depth
      addBrackets = str: dep:
        if dep == 0 then str
        else if str == "" then "- empt -"
        else "[" + (addBrackets str (dep - 1)) + "]";
    in
      if headerCombined == "" || headerCombined == null then ""
      else "[${headerCombined}]"
  ;

  mkSectionToToml = depth: prefix: name: set:
    let
      headerCombined = mkHeaderName prefix name;
      simpleProperties = filterAttrs (_: val: !isAttrs val) set;
      subSectionProperties = filterAttrs (_: val: isAttrs val) set;
      
      header = mkSectionHeaderToToml depth headerCombined;
      properties = concatStringsSep "\n" (mapAttrsToList mkSimpleExpressionToToml simpleProperties);
      subSections = concatStringsSep "\n\n" 
        (mapAttrsToList 
          (k: v: 
            mkSectionToToml (depth + 1) headerCombined k v
          ) subSectionProperties
        )
      ;
    in
    ''
    ${header}
    ${properties}
    ${subSections}
    ''
  ;

  # Generate the entire configuration file
  generateTomlConfig = settings:
    let
      tomlConfig = (mkSectionToToml 0 null null settings); 
    in ''
      # Walker configuration generated by Home Manager
      ${tomlConfig}
    ''
  ;

  generateCssConfig = css:
    let
      base16 = css.base16-colors;
    in ''
        /* Walker configuration generated by Home Manager */
        /* Base16 Color Definitions */
        @define-color base00 #${base16.base00}; /* Default Background */
        @define-color base01 #${base16.base01}; /* Lighter Background */
        @define-color base02 #${base16.base02}; /* Selection Background */
        @define-color base03 #${base16.base03}; /* Comments, Invisibles, Line Highlighting */
        @define-color base04 #${base16.base04}; /* Dark Foreground */
        @define-color base05 #${base16.base05}; /* Default Foreground */
        @define-color base06 #${base16.base06}; /* Light Foreground */
        @define-color base07 #${base16.base07}; /* Light Background */
        @define-color base08 #${base16.base08}; /* Red - Variables, XML Tags, Markup Link Text, Markup Lists */
        @define-color base09 #${base16.base09}; /* Orange - Integers, Boolean, Constants */
        @define-color base0A #${base16.base0A}; /* Yellow - Classes, Markup Bold, Search Text Background */
        @define-color base0B #${base16.base0B}; /* Green - Strings, Inherited Class, Markup Code */
        @define-color base0C #${base16.base0C}; /* Aqua/Teal - Support, Regular Expressions */
        @define-color base0D #${base16.base0D}; /* Blue - Functions, Methods */
        @define-color base0E #${base16.base0E}; /* Purple - Keywords */
        @define-color base0F #${base16.base0F}; /* Brown - Deprecated */

        #window,
        #box,
        #aiScroll,
        #aiList,
        #search,
        #password,
        #input,
        #prompt,
        #clear,
        #typeahead,
        #list,
        child,
        scrollbar,
        slider,
        #item,
        #text,
        #label,
        #bar,
        #sub,
        #activationlabel {
          all: unset;
        }

        #cfgerr {
          background: alpha(@base08, 0.4);
          margin-top: 20px;
          padding: 8px;
          font-size: 1.2em;
        }

        #window {
          color: @base05;
        }

        #box {
          border-radius: 2px;
          background: alpha(@base00, 0.98);
          padding: 32px;
          border: 1px solid @base01;
          box-shadow:
            0 19px 38px alpha(@base00, 0.3),
            0 15px 12px alpha(@base00, 0.22);
        }

        #search {
          box-shadow:
            0 1px 3px alpha(@base00, 0.1),
            0 1px 2px alpha(@base00, 0.22);
          background: @base01;
          padding: 8px;
        }

        #prompt {
          margin-left: 4px;
          margin-right: 12px;
          color: @base05;
          opacity: 0.2;
        }

        #clear {
          color: @base05;
          opacity: 0.8;
        }

        #password,
        #input,
        #typeahead {
          border-radius: 2px;
        }

        #input {
          background: none;
        }

        #password {
        }

        #spinner {
          padding: 8px;
        }

        #typeahead {
          color: @base05;
          opacity: 0.8;
        }

        #input placeholder {
          opacity: 0.5;
        }

        #list {
        }

        child {
          padding: 8px;
          border-radius: 2px;
        }

        child:selected,
        child:hover {
          background: alpha(@base0C, 0.4);
        }

        #item {
        }

        #icon {
          margin-right: 8px;
        }

        #text {
        }

        #label {
          font-weight: 500;
        }

        #sub {
          opacity: 0.5;
          font-size: 0.8em;
        }

        #activationlabel {
        }

        #bar {
        }

        .barentry {
        }

        .activation #activationlabel {
        }

        .activation #text,
        .activation #icon,
        .activation #search {
          opacity: 0.5;
        }

        .aiItem {
          padding: 10px;
          border-radius: 2px;
          color: @base05;
          background: alpha(@base00, 0.98);
        }

        .aiItem.user {
          padding-left: 0;
          padding-right: 0;
        }

        .aiItem.assistant {
          background: @base01;
        }    
    ''
;
  
 
in {
  options.services.walker = {
    enable = mkEnableOption "Walker Wayland launcher";
    
    package = mkOption {
      type = types.package;
      default = pkgs.walker;
      description = "The Walker package to use.";
    };
    
    settings = mkOption {
      type = types.attrs;
      default = {};
      description = "Walker configuration options based on the Config Go struct.";
    };
    
    theme = mkOption {
      type = types.nullOr types.attrs;
      default = null;
      description = "Walker theme configuration. If null, no theme will be generated.";
    };
  };

  config = mkIf cfg.enable {
    home.packages = [ cfg.package ];
    
    # Main configuration file
    xdg.configFile = {
      "walker/config.toml" = {
        text = generateTomlConfig cfg.settings;
      };
    
      # Theme files (if configured)
      # xdg.configFile = mkIf (cfg.theme != null) {
      "walker/themes/${cfg.theme.name}.toml" = mkIf (cfg.theme != null && cfg.theme ? toml) {
        text = generateTomlConfig cfg.theme.toml;
      };
      
      "walker/themes/${cfg.theme.name}.css" = mkIf (cfg.theme != null && cfg.theme ? css) {
        text = generateCssConfig cfg.theme.css;
      };
    };
    # };
  };
}